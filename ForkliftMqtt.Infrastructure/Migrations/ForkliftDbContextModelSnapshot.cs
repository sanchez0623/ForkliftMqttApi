// <auto-generated />
using System;
using ForkliftMqtt.Infrastructure.Persistence.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForkliftMqtt.Infrastructure.Migrations
{
    [DbContext(typeof(ForkliftDbContext))]
    partial class ForkliftDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForkliftMqtt.Domain.Entities.Forklift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forklifts");

                    b.HasData(
                        new
                        {
                            Id = "FL-001",
                            LastMaintenanceDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "XC-2023",
                            Name = "叉车一号",
                            Status = "Idle"
                        },
                        new
                        {
                            Id = "FL-002",
                            LastMaintenanceDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "XC-2023",
                            Name = "叉车二号",
                            Status = "Working"
                        });
                });

            modelBuilder.Entity("ForkliftMqtt.Domain.Entities.ForkliftSensor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ForkliftId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ForkliftId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForkliftId");

                    b.HasIndex("ForkliftId1");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = "SENS-001",
                            ForkliftId = "FL-001",
                            Location = "前部",
                            Metadata = "{\"range\":\"0-100\",\"alertThreshold\":80}",
                            Type = "Temperature"
                        },
                        new
                        {
                            Id = "SENS-002",
                            ForkliftId = "FL-001",
                            Location = "中部",
                            Metadata = "{\"range\":\"0-100\",\"alertThreshold\":90}",
                            Type = "Humidity"
                        },
                        new
                        {
                            Id = "SENS-003",
                            ForkliftId = "FL-002",
                            Location = "电池仓",
                            Metadata = "{\"capacity\":\"200Ah\",\"alertThreshold\":20}",
                            Type = "Battery"
                        });
                });

            modelBuilder.Entity("ForkliftMqtt.Domain.ValueObjects.SensorReading", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("SensorId", "Timestamp");

                    b.HasIndex("SensorId");

                    b.HasIndex("Timestamp");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("ForkliftMqtt.Domain.Entities.ForkliftSensor", b =>
                {
                    b.HasOne("ForkliftMqtt.Domain.Entities.Forklift", null)
                        .WithMany()
                        .HasForeignKey("ForkliftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForkliftMqtt.Domain.Entities.Forklift", null)
                        .WithMany("Sensors")
                        .HasForeignKey("ForkliftId1");
                });

            modelBuilder.Entity("ForkliftMqtt.Domain.Entities.Forklift", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
